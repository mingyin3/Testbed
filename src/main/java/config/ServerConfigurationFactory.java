package config;

import java.io.InputStream;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Properties;
import javax.cache.configuration.Factory;
import javax.sql.DataSource;
import org.apache.ignite.cache.CacheAtomicityMode;
import org.apache.ignite.cache.CacheMode;
import org.apache.ignite.cache.QueryEntity;
import org.apache.ignite.cache.store.jdbc.CacheJdbcPojoStoreFactory;
import org.apache.ignite.cache.store.jdbc.JdbcType;
import org.apache.ignite.cache.store.jdbc.JdbcTypeField;
import org.apache.ignite.cache.store.jdbc.dialect.BasicJdbcDialect;
import org.apache.ignite.configuration.CacheConfiguration;
import org.apache.ignite.configuration.IgniteConfiguration;
import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;
import org.apache.ignite.spi.discovery.tcp.ipfinder.multicast.TcpDiscoveryMulticastIpFinder;
import org.postgresql.ds.PGPoolingDataSource;

/** This file was generated by Ignite Web Console (12/12/2017, 14:31) **/
public class ServerConfigurationFactory {
    /** Secret properties loading. **/
    private static final Properties props = new Properties();

    static {
        try (InputStream in = IgniteConfiguration.class.getClassLoader().getResourceAsStream("secret.properties")) {
            props.load(in);
        }
        catch (Exception ignored) {
            // No-op.
        }
    }

    /** Helper class for datasource creation. **/
    public static class DataSources {
        public static final PGPoolingDataSource INSTANCE_dsPostgreSQL_Postgres = createdsPostgreSQL_Postgres();

        private static PGPoolingDataSource createdsPostgreSQL_Postgres() {
            PGPoolingDataSource dsPostgreSQL_Postgres = new PGPoolingDataSource();

            dsPostgreSQL_Postgres.setUrl(props.getProperty("dsPostgreSQL_Postgres.jdbc.url"));
            dsPostgreSQL_Postgres.setUser(props.getProperty("dsPostgreSQL_Postgres.jdbc.username"));
            dsPostgreSQL_Postgres.setPassword(props.getProperty("dsPostgreSQL_Postgres.jdbc.password"));

            return dsPostgreSQL_Postgres;
        }
    }

    /**
     * Configure grid.
     * 
     * @return Ignite configuration.
     * @throws Exception If failed to construct Ignite configuration instance.
     **/
    public static IgniteConfiguration createConfiguration() throws Exception {
        IgniteConfiguration cfg = new IgniteConfiguration();

        cfg.setIgniteInstanceName("MyIgniteCluster");

        TcpDiscoverySpi discovery = new TcpDiscoverySpi();

        TcpDiscoveryMulticastIpFinder ipFinder = new TcpDiscoveryMulticastIpFinder();

        ipFinder.setAddresses(Arrays.asList("127.0.0.1:47500..47510"));

        discovery.setIpFinder(ipFinder);

        cfg.setDiscoverySpi(discovery);

        cfg.setCacheConfiguration(cacheEmployeeCache());

        return cfg;
    }

    /**
     * Create configuration for cache "EmployeeCache".
     * 
     * @return Configured cache.
     * @throws Exception if failed to create cache configuration.
     **/
    public static CacheConfiguration cacheEmployeeCache() throws Exception {
        CacheConfiguration ccfg = new CacheConfiguration();

        ccfg.setName("EmployeeCache");
        ccfg.setCacheMode(CacheMode.PARTITIONED);
        ccfg.setAtomicityMode(CacheAtomicityMode.ATOMIC);

        CacheJdbcPojoStoreFactory cacheStoreFactory = new CacheJdbcPojoStoreFactory();

        cacheStoreFactory.setDataSourceFactory(new Factory<DataSource>() {
            /** {@inheritDoc} **/
            @Override public DataSource create() {
                return DataSources.INSTANCE_dsPostgreSQL_Postgres;
            };
        });

        cacheStoreFactory.setDialect(new BasicJdbcDialect());

        cacheStoreFactory.setTypes(jdbcTypeEmployee(ccfg.getName()));

        ccfg.setCacheStoreFactory(cacheStoreFactory);

        ccfg.setReadThrough(true);
        ccfg.setWriteThrough(true);

        ArrayList<QueryEntity> qryEntities = new ArrayList<>();

        QueryEntity qryEntity = new QueryEntity();

        qryEntity.setKeyType("java.lang.Integer");
        qryEntity.setValueType("com.aexp.yin.y.ming.model.Employee");
        qryEntity.setKeyFieldName("id");

        HashSet<String> keyFields = new HashSet<>();

        keyFields.add("id");

        qryEntity.setKeyFields(keyFields);

        LinkedHashMap<String, String> fields = new LinkedHashMap<>();

        fields.put("empName", "java.lang.String");
        fields.put("empSalary", "java.lang.Double");
        fields.put("id", "java.lang.Integer");

        qryEntity.setFields(fields);

        HashMap<String, String> aliases = new HashMap<>();

        aliases.put("empName", "emp_name");
        aliases.put("empSalary", "emp_salary");

        qryEntity.setAliases(aliases);
        qryEntities.add(qryEntity);

        ccfg.setQueryEntities(qryEntities);

        return ccfg;
    }

    /**
     * Create JDBC type for "jdbcTypeEmployee".
     * 
     * @param cacheName Cache name.
     * @return Configured JDBC type.
     **/
    private static JdbcType jdbcTypeEmployee(String cacheName) {
        JdbcType type = new JdbcType();

        type.setCacheName(cacheName);
        type.setKeyType(Integer.class);
        type.setValueType("com.aexp.yin.y.ming.model.Employee");
        type.setDatabaseSchema("employee");
        type.setDatabaseTable("employee");

        type.setKeyFields(new JdbcTypeField(Types.INTEGER, "id", int.class, "id"));

        type.setValueFields(
            new JdbcTypeField(Types.VARCHAR, "emp_name", String.class, "empName"),
            new JdbcTypeField(Types.DOUBLE, "emp_salary", Double.class, "empSalary")
        );

        return type;
    }
}